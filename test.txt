
===
Project Name: 'stilly [SSH: 340swift]'
Project Path: 'app'
===

---
```ts
# 'app/api/game/guess/route.ts'
import { NextResponse } from 'next/server';
import { getTodayGame, makeGuess } from '@/lib/game';
import { cookies } from 'next/headers';
import { createClient } from '@/utils/supabase/server';

export async function POST(request: Request) {
  try {
    const { guess, sessionId } = await request.json();
    
    if (!sessionId) {
      return NextResponse.json(
        { error: 'Session ID is required' },
        { status: 400 }
      );
    }

    if (!guess || typeof guess !== 'string') {
      return NextResponse.json(
        { error: 'Valid guess is required' },
        { status: 400 }
      );
    }
    
    const currentGame = await getTodayGame(sessionId);
    
    if (!currentGame) {
      return NextResponse.json(
        { error: 'No active game found' },
        { status: 404 }
      );
    }

    if (currentGame.isComplete) {
      return NextResponse.json(
        { error: 'Game is already complete' },
        { status: 400 }
      );
    }

    if (currentGame.attempts >= 6) {
      return NextResponse.json(
        { error: 'Maximum attempts reached' },
        { status: 400 }
      );
    }

    const updatedGame = await makeGuess(sessionId, guess);
    return NextResponse.json(updatedGame);
  } catch (error) {
    console.error('Error processing guess:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to process guess',
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: 500 }
    );
  }
}
```

---
```ts
# 'app/api/game/route.ts'
import { NextResponse } from 'next/server';
import { getTodayGame } from '@/lib/game';
import { cookies } from 'next/headers';
import { createClient } from '@/utils/supabase/server';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    
    if (!sessionId) {
      return NextResponse.json(
        { error: 'Session ID is required' },
        { status: 400 }
      );
    }

    const game = await getTodayGame(sessionId);
    
    if (!game) {
      return NextResponse.json(
        { error: 'No game available' },
        { status: 404 }
      );
    }
    
    return NextResponse.json(game);
  } catch (error) {
    console.error('Error in /api/game:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to fetch game state',
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: 500 }
    );
  }
}

```

---
```ts
# 'app/api/health/route.ts'
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { createClient } from '@/utils/supabase/server';

export async function GET() {
  try {
    const cookieStore = cookies();
    const supabase = createClient(cookieStore);
    const { data, error } = await supabase.from('games').select('count');
    
    return NextResponse.json({ 
      status: 'ok',
      database: error ? 'disconnected' : 'connected',
      gamesCount: data?.[0]?.count ?? 0,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Health check failed:', error);
    return NextResponse.json({ 
      status: 'error',
      database: 'disconnected',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
```

---
```ts
# 'app/api/movies/search/route.ts'
// app/api/movies/search/route.ts
import { NextResponse } from 'next/server';
import { fetchMovieSearch } from '@/lib/tmdb';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('q');
    
    if (!query) {
      return NextResponse.json({ results: [] });
    }

    const movies = await fetchMovieSearch(query);
    return NextResponse.json({ results: movies });
  } catch (error) {
    console.error('Error searching movies:', error);
    return NextResponse.json(
      { error: 'Failed to search movies' },
      { status: 500 }
    );
  }
}
```

---
```ts
# 'app/api/stats/route.ts'
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    
    if (!sessionId) {
      return NextResponse.json(
        { error: 'Session ID is required' },
        { status: 400 }
      );
    }

    const { data: user, error } = await supabase
      .from('users')
      .select('stats')
      .eq('session_id', sessionId)
      .single();

    if (error) {
      throw error;
    }

    return NextResponse.json(user.stats);
  } catch (error) {
    console.error('Error fetching stats:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to fetch stats',
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: 500 }
    );
  }
}
```

---
```tsx
# 'app/components/GameBoard.tsx'
// app/components/GameBoard.tsx
"use client";

import React, { useState, FormEvent } from 'react';
import { GameState } from '@/lib/game';
import Image from 'next/image';
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import { motion, AnimatePresence } from "framer-motion";
import { Film, Tag, Star, BarChart2 } from 'lucide-react';
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import { MovieAutocomplete } from '../components/MovieAutocomplete';
import GameStats from './GameStats';

interface GameBoardProps {
  gameState: GameState;
  onGuess: (guess: string) => void;
}

const MAX_ATTEMPTS = 6;

const GameBoard: React.FC<GameBoardProps> = ({ gameState, onGuess }) => {
  const [guess, setGuess] = useState('');
  const [showError, setShowError] = useState(false);
  const [showStats, setShowStats] = useState(false);
  
  const progressPercentage = (gameState.attempts / MAX_ATTEMPTS) * 100;
  const remainingAttempts = MAX_ATTEMPTS - gameState.attempts;

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (guess.trim()) {
      onGuess(guess.trim());
      setGuess('');
    } else {
      setShowError(true);
      setTimeout(() => setShowError(false), 3000);
    }
  };

  const getBlurAmount = () => {
    return Math.max(0, 20 - (gameState.attempts * 4));
  };

  // Show stats automatically when game is complete
  React.useEffect(() => {
    if (gameState.isComplete || gameState.attempts >= MAX_ATTEMPTS) {
      const timer = setTimeout(() => setShowStats(true), 1500);
      return () => clearTimeout(timer);
    }
  }, [gameState.isComplete, gameState.attempts]);

  return (
    <>
      <Card className="w-full max-w-3xl mx-auto bg-zinc-900/90 border-indigo-500/20 backdrop-blur-sm">
        <CardHeader className="space-y-4 pb-4">
          <div className="flex items-center justify-between gap-4">
            <div className="flex items-center gap-2">
              <Film className="w-5 h-5 text-indigo-400" />
              <span className="text-sm font-medium text-zinc-400">
                Attempt {gameState.attempts}/{MAX_ATTEMPTS}
              </span>
            </div>
            <Progress 
              value={progressPercentage} 
              className="w-full max-w-[200px] h-2"
            />
            <Button
              variant="ghost"
              size="sm"
              className="px-2"
              onClick={() => setShowStats(true)}
            >
              <BarChart2 className="w-5 h-5 text-indigo-400" />
            </Button>
          </div>

          <div className="flex flex-wrap gap-2 justify-center">
            {gameState.movie.genres.map((genre, index) => (
              <Badge
                key={index}
                variant="secondary"
                className="bg-indigo-500/10 text-indigo-200 hover:bg-indigo-500/20"
              >
                <Tag className="w-3 h-3 mr-1" />
                {genre}
              </Badge>
            ))}
          </div>

          <Separator className="bg-indigo-500/20" />
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="relative aspect-video w-full overflow-hidden rounded-lg">
            <div 
              className="absolute inset-0 bg-gradient-to-b from-transparent to-zinc-900/50"
              style={{ zIndex: 2 }}
            />
            <Image
              src={gameState.movie.imageUrl}
              alt="Movie Still"
              fill
              className="object-cover transition-all duration-500"
              style={{ 
                filter: `blur(${getBlurAmount()}px)`,
                transform: 'scale(1.1)'
              }}
              priority
            />
          </div>

          <div className="space-y-3 bg-zinc-900/50 rounded-lg p-4 border border-zinc-800">
            <h3 className="text-sm font-medium text-zinc-400 flex items-center gap-2">
              <Star className="w-4 h-4" />
              Movie Clues
            </h3>
            
            {gameState.previousClues.map((clue, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0 }}
                animate={{ opacity: 0.6 }}
                className="text-sm text-zinc-500 pl-4 border-l border-zinc-800"
              >
                {clue}
              </motion.div>
            ))}
            
            {gameState.currentClue && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-sm text-indigo-200 font-medium pl-4 border-l-2 border-indigo-500"
              >
                {gameState.currentClue}
              </motion.div>
            )}
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="flex gap-2">
              <div className="flex-1">
                <MovieAutocomplete
                  onSelect={(value) => setGuess(value)}
                  disabled={gameState.isComplete || gameState.attempts >= MAX_ATTEMPTS}
                  placeholder="Enter movie title..."
                />
              </div>
              <Button 
                type="submit"
                disabled={gameState.isComplete || gameState.attempts >= MAX_ATTEMPTS || !guess}
                className={cn(
                  "bg-indigo-600 hover:bg-indigo-700 text-white min-w-[80px]",
                  (gameState.isComplete || gameState.attempts >= MAX_ATTEMPTS) && "opacity-50"
                )}
              >
                Guess
              </Button>
            </div>

            <div className="grid grid-cols-1 gap-2">
              {gameState.guesses.map((guess, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="bg-zinc-800/30 p-3 rounded-md border border-zinc-800/50"
                >
                  <span className="text-zinc-300 font-medium">
                    {guess}
                  </span>
                </motion.div>
              ))}
            </div>
          </form>

          <AnimatePresence>
            {gameState.isComplete && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
              >
                <Alert className="bg-green-500/20 border-green-500/50 text-green-200">
                  <Star className="w-4 h-4" />
                  <AlertDescription className="ml-2">
                    Congratulations! You&apos;ve correctly guessed today&apos;s movie: &quot;{gameState.movie.title}&quot;!
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}

            {!gameState.isComplete && gameState.attempts >= MAX_ATTEMPTS && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
              >
                <Alert className="bg-red-500/20 border-red-500/50 text-red-200">
                  <AlertDescription>
                    Game Over • The movie was &quot;{gameState.movie.title}&quot;
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}

            {showError && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
              >
                <Alert className="bg-red-500/20 border-red-500/50 text-red-200">
                  <AlertDescription>
                    Please enter a valid guess
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>
        </CardContent>
      </Card>

      <AnimatePresence>
        <GameStats 
          stats={gameState.stats}
          show={showStats}
          onClose={() => setShowStats(false)}
        />
      </AnimatePresence>
    </>
  );
};

export default GameBoard;
```

---
```tsx
# 'app/components/GameStats.tsx'
// app/components/GameStats.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Trophy, Award, Flame, BarChart2 } from 'lucide-react';
import { UserGameStats } from '@/lib/game';
import { motion } from "framer-motion";

interface GameStatsProps {
  stats: UserGameStats;
  show: boolean;
  onClose?: () => void;
}

const GameStats: React.FC<GameStatsProps> = ({ stats, show, onClose }) => {
  if (!show) return null;

  const winPercentage = stats.totalGames > 0 
    ? Math.round((stats.gamesWon / stats.totalGames) * 100) 
    : 0;

  const maxGuesses = Math.max(...Object.values(stats.guessDistribution));

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <Card 
        className="w-full max-w-md bg-zinc-900/95 border-indigo-500/20 backdrop-blur-sm"
        onClick={e => e.stopPropagation()}
      >
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-between">
            <CardTitle className="text-xl font-bold text-zinc-100 flex items-center gap-2">
              <Trophy className="w-5 h-5 text-yellow-500" />
              Your Statistics
            </CardTitle>
            <button 
              onClick={onClose}
              className="text-zinc-400 hover:text-zinc-100 transition-colors"
            >
              ✕
            </button>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="grid grid-cols-4 gap-4">
            <Stat
              value={stats.totalGames}
              label="Played"
              icon={<BarChart2 className="w-4 h-4 text-blue-400" />}
            />
            <Stat
              value={`${winPercentage}%`}
              label="Win Rate"
              icon={<Trophy className="w-4 h-4 text-yellow-400" />}
            />
            <Stat
              value={stats.currentStreak}
              label="Streak"
              icon={<Flame className="w-4 h-4 text-orange-400" />}
            />
            <Stat
              value={stats.maxStreak}
              label="Max Streak"
              icon={<Award className="w-4 h-4 text-purple-400" />}
            />
          </div>

          <div className="space-y-4">
            <h3 className="text-sm font-medium text-zinc-400 flex items-center gap-2">
              <BarChart2 className="w-4 h-4" />
              Guess Distribution
            </h3>
            <div className="space-y-2">
              {Object.entries(stats.guessDistribution).map(([guess, count]) => (
                <div key={guess} className="flex items-center gap-2">
                  <span className="text-xs text-zinc-400 w-4">{guess}</span>
                  <div className="flex-1">
                    <div
                      className={`rounded-sm h-5 flex items-center px-2 transition-all ${
                        count > 0 
                          ? 'bg-indigo-500/20 hover:bg-indigo-500/30' 
                          : 'bg-zinc-800/50'
                      }`}
                      style={{
                        width: maxGuesses > 0 
                          ? `${(count / maxGuesses) * 100}%` 
                          : '0%',
                        minWidth: count > 0 ? '2rem' : '0'
                      }}
                    >
                      <span className="text-xs text-zinc-100">{count}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {stats.totalGames > 0 && (
            <div className="pt-4 border-t border-zinc-800">
              <p className="text-sm text-zinc-400 text-center">
                Next movie in{' '}
                <TimeUntilNextGame />
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
};

const Stat: React.FC<{
  value: number | string;
  label: string;
  icon: React.ReactNode;
}> = ({ value, label, icon }) => (
  <div className="flex flex-col items-center space-y-1">
    {icon}
    <span className="text-2xl font-bold text-zinc-100">
      {value}
    </span>
    <span className="text-xs text-zinc-400">
      {label}
    </span>
  </div>
);

const TimeUntilNextGame: React.FC = () => {
  const [timeLeft, setTimeLeft] = React.useState<string>('');

  React.useEffect(() => {
    const calculateTimeLeft = () => {
      const now = new Date();
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);
      
      const diff = tomorrow.getTime() - now.getTime();
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      
      return `${hours}h ${minutes}m`;
    };

    setTimeLeft(calculateTimeLeft());
    const timer = setInterval(() => {
      setTimeLeft(calculateTimeLeft());
    }, 60000);

    return () => clearInterval(timer);
  }, []);

  return <span className="font-medium text-indigo-400">{timeLeft}</span>;
};

export default GameStats;
```

---
```tsx
# 'app/components/GuessList.tsx'
// app/components/GuessList.tsx

"use client";

import { FC } from 'react';

interface GuessListProps {
  guesses: string[];
}

export const GuessList: FC<GuessListProps> = ({ guesses }) => {
  return (
    <ul className="guess-list mt-4 grid grid-cols-6 gap-2 justify-center">
      {guesses.map((guess, index) => (
        <li
          key={index}
          className="guess-item border rounded-md p-2 text-center font-bold"
        >
          {guess.toUpperCase()}
        </li>
      ))}
    </ul>
  );
};

```

---
```tsx
# 'app/components/MovieAutocomplete.tsx'
// components/MovieAutocomplete.tsx
"use client"

import * as React from "react"
import { Film, Loader2 } from "lucide-react"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverAnchor,
} from "@/components/ui/popover"
import { useDebounce } from "@/lib/hooks/useDebounce"

interface MovieSuggestion {
  id: number
  title: string
  release_date: string
}

interface MovieAutocompleteProps {
  onSelect: (value: string) => void
  disabled?: boolean
  placeholder?: string
}

export function MovieAutocomplete({
  onSelect,
  disabled = false,
  placeholder = "Search for a movie...",
}: MovieAutocompleteProps) {
  const [open, setOpen] = React.useState(false)
  const [inputValue, setInputValue] = React.useState("")
  const [suggestions, setSuggestions] = React.useState<MovieSuggestion[]>([])
  const [loading, setLoading] = React.useState(false)

  const debouncedSearch = useDebounce(inputValue, 300)
  const inputRef = React.useRef<HTMLInputElement>(null)

  React.useEffect(() => {
    if (!debouncedSearch) {
      setSuggestions([])
      return
    }

    const fetchSuggestions = async () => {
      setLoading(true)
      try {
        const response = await fetch(
          `/api/movies/search?q=${encodeURIComponent(debouncedSearch)}`
        )
        const data = await response.json()
        setSuggestions(data.results || [])
        setOpen(true)
      } catch (error) {
        console.error("Error fetching suggestions:", error)
        setSuggestions([])
      } finally {
        setLoading(false)
      }
    }

    fetchSuggestions()
  }, [debouncedSearch])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value)
    if (!e.target.value) {
      setOpen(false)
    }
  }

  const handleSelect = (movie: MovieSuggestion) => {
    setInputValue(movie.title)
    onSelect(movie.title)
    setOpen(false)
    setSuggestions([])
  }

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverAnchor asChild>
        <div className="relative">
          <Input
            ref={inputRef}
            value={inputValue}
            onChange={handleInputChange}
            onFocus={() => inputValue && setOpen(true)}
            placeholder={placeholder}
            disabled={disabled}
            className={cn(
              "w-full bg-zinc-800/50 border-zinc-700 text-zinc-100 placeholder:text-zinc-500",
              "focus:ring-1 focus:ring-indigo-500/50",
              disabled && "opacity-50 cursor-not-allowed"
            )}
          />
          {loading && (
            <div className="absolute right-3 top-2.5">
              <Loader2 className="h-4 w-4 animate-spin text-zinc-400" />
            </div>
          )}
        </div>
      </PopoverAnchor>
      <PopoverContent 
        className="w-full p-0 mt-1" 
        align="start"
        side="bottom"
        sideOffset={4}
        onInteractOutside={(e) => {
          e.preventDefault()
          setOpen(false)
        }}
      >
        <Command shouldFilter={false}>
          <CommandList>
            <CommandEmpty className="py-3 text-sm text-zinc-500">
              {loading ? "Searching movies..." : "No movies found."}
            </CommandEmpty>
            <CommandGroup>
              {suggestions.map((movie) => (
                <CommandItem
                  key={movie.id}
                  value={movie.title}
                  onSelect={() => handleSelect(movie)}
                  className="flex items-center gap-2 py-2 px-3 cursor-pointer hover:bg-zinc-800/50"
                >
                  <Film className="h-4 w-4 text-zinc-400" />
                  <span className="flex-1 truncate text-zinc-200">
                    {movie.title}
                  </span>
                  {movie.release_date && (
                    <span className="text-sm text-zinc-500">
                      {movie.release_date.split("-")[0]}
                    </span>
                  )}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}
```

---
```css
# 'app/globals.css'
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    
    --radius: 0.75rem;
  }
}

@layer base {
  body {
    @apply bg-background text-foreground;
  }
}
```

---
```tsx
# 'app/layout.tsx'
// app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { Outfit } from 'next/font/google';
import './globals.css';

const inter = Inter({ 
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-sans',
});

const outfit = Outfit({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-display',
});

export const metadata: Metadata = {
  title: 'Stilly - Daily Film Frame Challenge',
  description: 'A daily movie guessing game that tests your film knowledge.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className={`${inter.variable} ${outfit.variable}`}>
      <body className="min-h-screen bg-background font-sans antialiased">
        {children}
      </body>
    </html>
  );
}
```

---
```tsx
# 'app/page.tsx'
// app/page.tsx
"use client";

import { useState, useEffect } from 'react';
import GameBoard from './components/GameBoard';
import { GameState } from '@/lib/game';
import { Card, CardContent } from "@/components/ui/card";
import { Film } from 'lucide-react';
import { v4 as uuidv4 } from 'uuid';

function useSessionId() {
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const key = 'stilly_session_id';
    let id = window.localStorage.getItem(key);
    
    if (!id) {
      id = uuidv4();
      window.localStorage.setItem(key, id);
    }
    
    setSessionId(id);
    setIsLoading(false);
  }, []);

  return { sessionId, isLoading };
}

export default function Home() {
  const [gameState, setGameState] = useState<GameState | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { sessionId, isLoading: sessionLoading } = useSessionId();

  useEffect(() => {
    if (sessionId) {
      fetchGameState(sessionId);
    }
  }, [sessionId]);

  const fetchGameState = async (sid: string) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch(`/api/game?sessionId=${sid}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(
          errorData?.error || `HTTP error! status: ${response.status}`
        );
      }
      
      const data = await response.json();
      setGameState(data);
    } catch (error) {
      console.error('Error fetching game state:', error);
      setError(error instanceof Error ? error.message : 'An unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleGuess = async (guess: string) => {
    if (!sessionId) return;

    try {
      const response = await fetch('/api/game/guess', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          guess,
          sessionId 
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(
          errorData?.error || `HTTP error! status: ${response.status}`
        );
      }

      const updatedState = await response.json();
      setGameState(updatedState);
    } catch (error) {
      console.error('Error submitting guess:', error);
      setError(error instanceof Error ? error.message : 'Failed to submit guess');
    }
  };

  if (sessionLoading || loading) {
    return (
      <div className="min-h-screen bg-zinc-950 flex items-center justify-center">
        <Card className="max-w-md w-full bg-zinc-900/90 border-zinc-800">
          <CardContent className="flex justify-center p-6">
            <div className="text-zinc-400 animate-pulse flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-zinc-500 border-t-transparent rounded-full animate-spin" />
              Loading...
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-zinc-950 flex items-center justify-center p-4">
        <Card className="max-w-md w-full bg-zinc-900/90 border-zinc-800">
          <CardContent className="flex flex-col items-center p-6 space-y-4">
            <div className="text-red-400 text-center">
              {error}
            </div>
            <button 
              onClick={() => sessionId && fetchGameState(sessionId)}
              className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
            >
              Try Again
            </button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-zinc-950 relative overflow-hidden">
      <div 
        className="absolute inset-0 opacity-50"
        style={{
          background: 'linear-gradient(45deg, rgba(51, 65, 85, 0.1), rgba(100, 116, 139, 0.1))',
          backgroundSize: '400% 400%',
          animation: 'gradient 15s ease infinite'
        }}
      />

      <main className="relative container mx-auto p-4 pt-12">
        <div className="text-center mb-12">
          <h1 className="relative inline-flex flex-col items-center">
            <div className="flex items-center gap-3 mb-2">
              <Film className="w-12 h-12 text-indigo-400" />
              <span className="text-6xl md:text-7xl font-black text-white tracking-tight font-display">
                Stilly
              </span>
            </div>
            <span className="text-sm md:text-base text-zinc-400 font-medium font-sans">
              Daily Film Frame Challenge
            </span>
          </h1>
        </div>

        {gameState && (
          <GameBoard gameState={gameState} onGuess={handleGuess} />
        )}
      </main>
    </div>
  );
}
```


===
Project Name: 'stilly [SSH: 340swift]'
Project Path: 'components'
===

---
```tsx
# 'components/ui/alert.tsx'
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

```

---
```tsx
# 'components/ui/badge.tsx'
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

```

---
```tsx
# 'components/ui/button.tsx'
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

```

---
```tsx
# 'components/ui/card.tsx'
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

---
```tsx
# 'components/ui/command.tsx'
// components/ui/command.tsx
import * as React from "react"
import { DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
```

---
```tsx
# 'components/ui/dialog.tsx'
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

```

---
```tsx
# 'components/ui/input.tsx'
import * as React from "react";
import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  // Additional props can be added here
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Input.displayName = "Input";

export { Input };
```

---
```tsx
# 'components/ui/popover.tsx'
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

```

---
```tsx
# 'components/ui/progress.tsx'
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

```

---
```tsx
# 'components/ui/separator.tsx'
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

```

===
Project Name: 'stilly [SSH: 340swift]'
Project Path: 'lib'
===

---
```ts
# 'lib/game.ts'
// lib/game.ts

import { supabase } from './supabase';
import { fetchCuratedMovies, getImageUrl, type TMDBMovie } from './tmdb';
import { cookies } from 'next/headers';

export interface GameState {
  id: number;
  date: Date;
  movie: {
    id: number;
    title: string;
    imageUrl: string;
    genres: string[];
  };
  guesses: string[];
  attempts: number;
  isComplete: boolean;
  currentClue: string;
  previousClues: string[];
  stats: UserGameStats;
}

interface UserGameStats {
  totalGames: number;
  gamesWon: number;
  currentStreak: number;
  maxStreak: number;
  guessDistribution: Record<number, number>;
}

const DEFAULT_STATS: UserGameStats = {
  totalGames: 0,
  gamesWon: 0,
  currentStreak: 0,
  maxStreak: 0,
  guessDistribution: {
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0
  }
};

async function getUserId(sessionId: string): Promise<number> {
  if (!sessionId) {
    throw new Error('Session ID is required');
  }

  // Try to get existing user
  const { data: existingUser, error: fetchError } = await supabase
    .from('users')
    .select('id, stats')
    .eq('session_id', sessionId)
    .single();

  if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is "no rows returned"
    throw new Error(`Error fetching user: ${fetchError.message}`);
  }

  if (existingUser) {
    return existingUser.id;
  }

  // Create new user if doesn't exist
  const { data: newUser, error: createError } = await supabase
    .from('users')
    .insert({
      session_id: sessionId,
      stats: DEFAULT_STATS
    })
    .select('id')
    .single();

  if (createError || !newUser) {
    throw new Error(`Failed to create user: ${createError?.message}`);
  }

  return newUser.id;
}

async function getUserStats(userId: number): Promise<UserGameStats> {
  const { data, error } = await supabase
    .from('users')
    .select('stats')
    .eq('id', userId)
    .single();

  if (error) {
    throw new Error(`Failed to fetch user stats: ${error.message}`);
  }

  return data.stats as UserGameStats;
}

async function updateUserStats(
  userId: number, 
  gameOutcome: { won: boolean; attempts: number }
): Promise<UserGameStats> {
  const { data: user, error: fetchError } = await supabase
    .from('users')
    .select('stats')
    .eq('id', userId)
    .single();

  if (fetchError) {
    throw new Error(`Failed to fetch user for stats update: ${fetchError.message}`);
  }

  const currentStats = user.stats as UserGameStats;
  const newStats = {
    ...currentStats,
    totalGames: currentStats.totalGames + 1,
    gamesWon: currentStats.gamesWon + (gameOutcome.won ? 1 : 0),
    currentStreak: gameOutcome.won ? currentStats.currentStreak + 1 : 0,
    maxStreak: gameOutcome.won 
      ? Math.max(currentStats.maxStreak, currentStats.currentStreak + 1)
      : currentStats.maxStreak,
    guessDistribution: {
      ...currentStats.guessDistribution,
      [gameOutcome.attempts]: gameOutcome.won 
        ? (currentStats.guessDistribution[gameOutcome.attempts] || 0) + 1
        : currentStats.guessDistribution[gameOutcome.attempts] || 0
    }
  };

  const { data: updatedUser, error: updateError } = await supabase
    .from('users')
    .update({ stats: newStats })
    .eq('id', userId)
    .select('stats')
    .single();

  if (updateError) {
    throw new Error(`Failed to update user stats: ${updateError.message}`);
  }

  return updatedUser.stats as UserGameStats;
}

export async function initializeTodayGame(): Promise<GameState | null> {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // First check if a game already exists for today
    const { data: existingGame } = await supabase
      .from('games')
      .select('*')
      .eq('date', today.toISOString().split('T')[0])
      .single();

    if (existingGame) {
      return getTodayGame(existingGame.id.toString());
    }

    // Select a movie for today
    const selectedMovie = await selectCuratedMovie();

    // Create or get movie record
    let movieRecord;
    const { data: newMovie, error: movieError } = await supabase
      .from('movies')
      .insert({
        tmdb_id: selectedMovie.id,
        title: selectedMovie.title,
        image_url: selectedMovie.imageUrl,
        genres: JSON.stringify(selectedMovie.genres)
      })
      .select()
      .single();

    if (movieError) {
      if (movieError.code === '23505') { // Unique violation
        const { data: existingMovie } = await supabase
          .from('movies')
          .select()
          .eq('tmdb_id', selectedMovie.id)
          .single();
        
        if (existingMovie) {
          movieRecord = existingMovie;
        } else {
          throw new Error('Failed to fetch existing movie');
        }
      } else {
        throw new Error(`Failed to create movie record: ${movieError.message}`);
      }
    } else {
      movieRecord = newMovie;
    }

    // Create game record
    const { data: gameRecord, error: gameError } = await supabase
      .from('games')
      .insert({
        date: today.toISOString().split('T')[0],
        movie_id: movieRecord.id
      })
      .select(`
        *,
        movie:movies(*)
      `)
      .single();

    if (gameError) {
      throw new Error(`Failed to create game record: ${gameError.message}`);
    }

    return {
      id: gameRecord.id,
      date: new Date(gameRecord.date),
      movie: {
        id: gameRecord.movie.tmdb_id,
        title: gameRecord.movie.title,
        imageUrl: gameRecord.movie.image_url,
        genres: JSON.parse(gameRecord.movie.genres),
      },
      guesses: [],
      attempts: 0,
      isComplete: false,
      currentClue: '',
      previousClues: [],
      stats: DEFAULT_STATS
    };
  } catch (error) {
    console.error('Error initializing today\'s game:', error);
    throw error;
  }
}

interface RecentGameMovie {
  movie: {
    tmdb_id: number;
  }
}

async function selectCuratedMovie(): Promise<{ 
  id: number; 
  title: string; 
  imageUrl: string; 
  genres: string[] 
}> {
  const movies = await fetchCuratedMovies();
  if (!movies.length) {
    throw new Error('No movies available');
  }

  // Get recently used movies with proper typing
  const { data: recentGames, error: recentGamesError } = await supabase
    .from('games')
    .select<string, RecentGameMovie>('movie:movies!inner(tmdb_id)')
    .order('date', { ascending: false })
    .limit(100);

  if (recentGamesError) {
    console.error('Error fetching recent games:', recentGamesError);
    throw new Error(`Failed to fetch recent games: ${recentGamesError.message}`);
  }

  // Extract tmdb_ids from the nested movie objects
  const recentMovieIds = new Set(
    recentGames?.map(game => game.movie.tmdb_id) || []
  );

  // Filter out recently used movies
  const availableMovies = movies.filter(
    movie => !recentMovieIds.has(movie.id)
  );

  // If no unused movies, use all movies
  const moviePool = availableMovies.length > 0 ? availableMovies : movies;

  // Use date as seed for consistent random selection
  const today = new Date();
  const seed = today.getFullYear() * 10000 + 
               (today.getMonth() + 1) * 100 + 
               today.getDate();
  const selectedMovie = moviePool[seed % moviePool.length];

  return {
    id: selectedMovie.id,
    title: selectedMovie.title,
    imageUrl: getImageUrl(
      selectedMovie.backdrop_path || selectedMovie.poster_path
    ),
    genres: selectedMovie.genres
  };
}

export async function getTodayGame(sessionId: string): Promise<GameState | null> {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  // Get or create user
  const userId = await getUserId(sessionId);

  // Get today's game
  const { data: game, error: gameError } = await supabase
    .from('games')
    .select(`
      *,
      movie:movies(*)
    `)
    .eq('date', today.toISOString().split('T')[0])
    .single();

  if (gameError && gameError.code !== 'PGRST116') {
    throw new Error(`Error fetching game: ${gameError.message}`);
  }

  if (!game) {
    const newGame = await initializeTodayGame();
    return getOrCreateUserSession(userId, newGame!.id);
  }

  return getOrCreateUserSession(userId, game.id);
}

async function getOrCreateUserSession(userId: number, gameId: number): Promise<GameState> {
  // Get existing session
  const { data: existingSession, error: sessionError } = await supabase
    .from('user_game_sessions')
    .select(`
      *,
      game:games(
        *,
        movie:movies(*)
      ),
      guesses:user_game_guesses(guess, created_at),
      clues:user_game_clues(content, created_at)
    `)
    .eq('user_id', userId)
    .eq('game_id', gameId)
    .single();

  if (sessionError && sessionError.code !== 'PGRST116') {
    throw new Error(`Error fetching user session: ${sessionError.message}`);
  }

  if (existingSession) {
    const userStats = await getUserStats(userId);
    return mapGameToState(existingSession.game, existingSession, userStats);
  }

  // Create new session
  const { data: newSession, error: createError } = await supabase
    .from('user_game_sessions')
    .insert({
      user_id: userId,
      game_id: gameId,
      attempts: 0,
      is_complete: false
    })
    .select(`
      *,
      game:games(
        *,
        movie:movies(*)
      ),
      guesses:user_game_guesses(guess, created_at),
      clues:user_game_clues(content, created_at)
    `)
    .single();

  if (createError || !newSession) {
    throw new Error(`Failed to create user session: ${createError?.message}`);
  }

  const userStats = await getUserStats(userId);
  return mapGameToState(newSession.game, newSession, userStats);
}

export async function makeGuess(sessionId: string, guess: string): Promise<GameState> {
  const userId = await getUserId(sessionId);
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  // Get current game and session
  const { data: session, error: sessionError } = await supabase
    .from('user_game_sessions')
    .select(`
      *,
      game:games(
        *,
        movie:movies(*)
      ),
      guesses:user_game_guesses(guess, created_at),
      clues:user_game_clues(content, created_at)
    `)
    .eq('user_id', userId)
    .eq('game.date', today.toISOString().split('T')[0])
    .single();

  if (sessionError || !session) {
    throw new Error('Active game session not found');
  }

  if (session.is_complete || session.attempts >= 6) {
    throw new Error('Game is already complete');
  }

  const normalizedGuess = guess.trim().toLowerCase();
  const normalizedTitle = session.game.movie.title.toLowerCase();
  const isCorrect = normalizedGuess === normalizedTitle;
  const newAttemptNumber = session.attempts + 1;

  // Add guess
  const { error: guessError } = await supabase
    .from('user_game_guesses')
    .insert({
      user_game_session_id: session.id,
      guess: guess.trim()
    });

  if (guessError) {
    throw new Error(`Failed to save guess: ${guessError.message}`);
  }

  // Generate and add new clue
  const movies = await fetchCuratedMovies();
  const movieData = movies.find(m => m.id === session.game.movie.tmdb_id);
  const newClue = movieData ? generateClue(movieData, newAttemptNumber) : '';

  if (newClue) {
    const { error: clueError } = await supabase
      .from('user_game_clues')
      .insert({
        user_game_session_id: session.id,
        content: newClue
      });

    if (clueError) {
      throw new Error(`Failed to save clue: ${clueError.message}`);
    }
  }

  // Update session state
  const { data: updatedSession, error: updateError } = await supabase
    .from('user_game_sessions')
    .update({
      attempts: newAttemptNumber,
      is_complete: isCorrect
    })
    .eq('id', session.id)
    .select(`
      *,
      game:games(
        *,
        movie:movies(*)
      ),
      guesses:user_game_guesses(guess, created_at),
      clues:user_game_clues(content, created_at)
    `)
    .single();

  if (updateError || !updatedSession) {
    throw new Error(`Failed to update session: ${updateError?.message}`);
  }

  // Update user stats if game is complete
  const gameComplete = isCorrect || newAttemptNumber >= 6;
  if (gameComplete) {
    const userStats = await updateUserStats(userId, {
      won: isCorrect,
      attempts: newAttemptNumber
    });
    return mapGameToState(updatedSession.game, updatedSession, userStats);
  }

  const userStats = await getUserStats(userId);
  return mapGameToState(updatedSession.game, updatedSession, userStats);
}

function generateClue(movie: TMDBMovie, attemptNumber: number): string {
  const clues = [
    `Released in ${movie.release_date?.split('-')[0]}`,
    movie.director ? `Directed by ${movie.director}` : `A film from ${movie.release_date?.split('-')[0]}`,
    movie.runtime ? `Runtime: ${movie.runtime} minutes` : `Features ${movie.genres.join(', ')}`,
    movie.tagline ? `Tagline: "${movie.tagline}"` : movie.overview ? `Plot hint: "${movie.overview.split('.')[0]}."` : `Stars rate it ${movie.vote_average}/10`,
    movie.overview ? `Synopsis preview: "${movie.overview.split('.').slice(0, 2).join('.')}."` : `Popular in ${movie.genres[0]}`,
    `Final hint: This ${movie.genres[0].toLowerCase()} film has a ${movie.vote_average}/10 rating`
  ];
  
  return clues[Math.min(attemptNumber - 1, clues.length - 1)];
}

function mapGameToState(game: any, session: any, stats: UserGameStats): GameState {
  if (!game || !session) {
    throw new Error('Invalid game or session data provided to mapGameToState');
  }

  // Ensure proper sorting of guesses and clues by creation date
  const sortedGuesses = (session.guesses || [])
    .sort((a: any, b: any) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())
    .map((g: any) => g.guess);

  const sortedClues = (session.clues || [])
    .sort((a: any, b: any) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())
    .map((c: any) => c.content);

  try {
    // Parse genres with error handling
    const genres = (() => {
      try {
        return JSON.parse(game.movie.genres);
      } catch (e) {
        console.error('Error parsing genres:', e);
        return [];
      }
    })();

    return {
      id: game.id,
      date: new Date(game.date),
      movie: {
        id: game.movie.tmdb_id,
        title: game.movie.title,
        imageUrl: game.movie.image_url,
        genres: genres,
      },
      guesses: sortedGuesses,
      attempts: session.attempts,
      isComplete: session.is_complete,
      currentClue: sortedClues.length > 0 ? sortedClues[sortedClues.length - 1] : '',
      previousClues: sortedClues.slice(0, -1),
      stats
    };
  } catch (error) {
    console.error('Error mapping game state:', error);
    throw new Error('Failed to map game state: ' + (error instanceof Error ? error.message : 'Unknown error'));
  }
}

// Helper function to validate game state
function validateGameState(state: GameState): boolean {
  if (!state) return false;

  // Basic structure validation
  const requiredProperties = [
    'id',
    'date',
    'movie',
    'guesses',
    'attempts',
    'isComplete',
    'currentClue',
    'previousClues',
    'stats'
  ];

  const hasAllProperties = requiredProperties.every(prop => prop in state);
  if (!hasAllProperties) return false;

  // Movie object validation
  const requiredMovieProperties = ['id', 'title', 'imageUrl', 'genres'];
  const hasAllMovieProperties = requiredMovieProperties.every(prop => prop in state.movie);
  if (!hasAllMovieProperties) return false;

  // Stats validation
  const requiredStatsProperties = [
    'totalGames',
    'gamesWon',
    'currentStreak',
    'maxStreak',
    'guessDistribution'
  ];
  const hasAllStatsProperties = requiredStatsProperties.every(prop => prop in state.stats);
  if (!hasAllStatsProperties) return false;

  // Type validations
  if (!(state.date instanceof Date)) return false;
  if (!Array.isArray(state.guesses)) return false;
  if (!Array.isArray(state.previousClues)) return false;
  if (!Array.isArray(state.movie.genres)) return false;
  if (typeof state.attempts !== 'number') return false;
  if (typeof state.isComplete !== 'boolean') return false;

  return true;
}

// Utility function to get today's date in ISO format for database queries
function getTodayDateString(): string {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return today.toISOString().split('T')[0];
}

// Export additional types and utilities that might be needed by other parts of the application
export type { UserGameStats, TMDBMovie };
export { validateGameState, getTodayDateString, DEFAULT_STATS };
```

---
```ts
# 'lib/hooks/useDebounce.ts'
import { useEffect, useState } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
```

---
```ts
# 'lib/supabase.ts'
// lib/supabase.ts
import { createClient } from '@supabase/supabase-js';

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: number
          session_id: string
          stats: Json
          created_at: string
        }
        Insert: {
          session_id: string
          stats?: Json
          created_at?: string
        }
        Update: {
          session_id?: string
          stats?: Json
          created_at?: string
        }
      }
      movies: {
        Row: {
          id: number
          tmdb_id: number
          title: string
          image_url: string
          genres: string
          created_at: string
        }
        Insert: {
          tmdb_id: number
          title: string
          image_url: string
          genres: string
          created_at?: string
        }
        Update: {
          tmdb_id?: number
          title?: string
          image_url?: string
          genres?: string
          created_at?: string
        }
      }
      games: {
        Row: {
          id: number
          date: string
          movie_id: number
          created_at: string
        }
        Insert: {
          date: string
          movie_id: number
          created_at?: string
        }
        Update: {
          date?: string
          movie_id?: number
          created_at?: string
        }
      }
      user_game_sessions: {
        Row: {
          id: number
          user_id: number
          game_id: number
          attempts: number
          is_complete: boolean
          created_at: string
        }
        Insert: {
          user_id: number
          game_id: number
          attempts?: number
          is_complete?: boolean
          created_at?: string
        }
        Update: {
          user_id?: number
          game_id?: number
          attempts?: number
          is_complete?: boolean
          created_at?: string
        }
      }
      user_game_guesses: {
        Row: {
          id: number
          user_game_session_id: number
          guess: string
          created_at: string
        }
        Insert: {
          user_game_session_id: number
          guess: string
          created_at?: string
        }
        Update: {
          user_game_session_id?: number
          guess?: string
          created_at?: string
        }
      }
      user_game_clues: {
        Row: {
          id: number
          user_game_session_id: number
          content: string
          created_at: string
        }
        Insert: {
          user_game_session_id: number
          content: string
          created_at?: string
        }
        Update: {
          user_game_session_id?: number
          content?: string
          created_at?: string
        }
      }
    }
    Functions: {
      make_guess: {
        Args: {
          p_session_id: number
          p_guess: string
          p_is_correct: boolean
          p_attempt_number: number
          p_clue: string
        }
        Returns: Json
      }
    }
  }
}

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(supabaseUrl, supabaseKey, {
  auth: {
    persistSession: false,
    autoRefreshToken: false
  }
});
```

---
```ts
# 'lib/tmdb.ts'
import axios from 'axios';

const TMDB_API_KEY = process.env.TMDB_API_KEY;
const TMDB_BASE_URL = 'https://api.themoviedb.org/3';

if (!TMDB_API_KEY) {
  throw new Error('TMDB_API_KEY is not defined in environment variables.');
}

export interface TMDBMovie {
  id: number;
  title: string;
  backdrop_path: string | null;
  poster_path: string | null;
  vote_average: number;
  release_date: string;
  popularity: number;
  genres: string[];
  tagline?: string;
  overview: string;
  director?: string;
  runtime?: number;
}

// Curated list IDs from TMDB
const CURATED_LISTS = [
  { id: '634', name: 'Best Picture Winners - The Academy Awards' },
  { id: '10', name: 'AFI Top 100' },
  { id: '3682', name: 'Empire Magazine 100 Greatest Films' },
  { id: '3945', name: 'Sight & Sound Top 100' },
  { id: '3721', name: 'IMDB Top 250' },
] as const;

async function fetchMovieFromList(listId: string): Promise<TMDBMovie[]> {
  try {
    const response = await axios.get(`${TMDB_BASE_URL}/list/${listId}`, {
      params: {
        api_key: TMDB_API_KEY,
        language: 'en-US',
      },
    });

    const movies = await Promise.all(
      response.data.items.map(async (movie: any) => {
        // Fetch additional movie details including credits
        const details = await axios.get(`${TMDB_BASE_URL}/movie/${movie.id}`, {
          params: {
            api_key: TMDB_API_KEY,
            language: 'en-US',
            append_to_response: 'credits'
          },
        });

        const director = details.data.credits?.crew.find(
          (person: any) => person.job === 'Director'
        )?.name;

        return {
          id: movie.id,
          title: movie.title,
          backdrop_path: movie.backdrop_path,
          poster_path: movie.poster_path,
          vote_average: movie.vote_average,
          release_date: movie.release_date,
          popularity: movie.popularity,
          genres: details.data.genres.map((g: any) => g.name),
          tagline: details.data.tagline,
          overview: details.data.overview,
          director,
          runtime: details.data.runtime,
        };
      })
    );

    return movies;
  } catch (error) {
    console.error(`Error fetching list ${listId}:`, error);
    return [];
  }
}

export async function fetchCuratedMovies(): Promise<TMDBMovie[]> {
  try {
    const allMovies = await Promise.all(
      CURATED_LISTS.map(list => fetchMovieFromList(list.id))
    );

    // Flatten and deduplicate movies based on ID
    const moviesMap = new Map<number, TMDBMovie>();
    allMovies.flat().forEach(movie => {
      if (!moviesMap.has(movie.id)) {
        moviesMap.set(movie.id, movie);
      }
    });

    // Convert back to array and filter for quality
    return Array.from(moviesMap.values()).filter(movie => 
      (movie.backdrop_path || movie.poster_path) &&
      movie.genres.length > 0
    );
  } catch (error) {
    console.error('Error fetching curated movies:', error);
    return [];
  }
}

export function getImageUrl(path: string | null, size: string = 'w500'): string {
  if (!path) return '/placeholder.png';
  return `https://image.tmdb.org/t/p/${size}${path}`;
}

export function generateClue(movie: TMDBMovie, attemptNumber: number): string {
  const clues = [
    `This film was released in ${movie.release_date.split('-')[0]}`,
    `Directed by ${movie.director}`,
    `Runtime: ${movie.runtime} minutes`,
    `Tagline: "${movie.tagline}"`,
    `From the plot: "${movie.overview.split('.')[0]}."`,
    `This movie's average rating is ${movie.vote_average}/10`,
  ];
  
  return clues[attemptNumber - 1] || "No more clues available!";
}

export interface MovieSearchResult {
  id: number;
  title: string;
  release_date: string;
  poster_path: string | null;
  backdrop_path: string | null;
}

export async function fetchMovieSearch(query: string): Promise<MovieSearchResult[]> {
  try {
    const response = await axios.get(`${TMDB_BASE_URL}/search/movie`, {
      params: {
        api_key: TMDB_API_KEY,
        language: 'en-US',
        query: query,
        include_adult: false,
        page: 1
      },
    });

    return response.data.results.map((movie: any) => ({
      id: movie.id,
      title: movie.title,
      release_date: movie.release_date,
      poster_path: movie.poster_path,
      backdrop_path: movie.backdrop_path
    }));
  } catch (error) {
    console.error('Error searching movies:', error);
    return [];
  }
}
```

---
```ts
# 'lib/utils.ts'
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

```

===
Project Name: 'stilly [SSH: 340swift]'
Project Path: 'utils'
===

---
```ts
# 'utils/supabase/client.ts'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

export const createBrowserClient = () => {
  return createClientComponentClient()
}
```

---
```ts
# 'utils/supabase/queries.ts'
import { createClient } from './server';
import { cookies } from 'next/headers';
import { Game, Movie } from './types';

export async function getGameWithRelations(gameId: number): Promise<Game | null> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);

  const { data, error } = await supabase
    .from('games')
    .select(`
      *,
      movie:movies(*),
      guesses:game_guesses(id, guess, created_at),
      clues:game_clues(id, content, created_at)
    `)
    .eq('id', gameId)
    .single();

  if (error) {
    console.error('Error fetching game:', error);
    return null;
  }

  return data;
}

export async function updateGameState(
  gameId: number,
  updates: Partial<Game>
): Promise<Game | null> {
  const cookieStore = cookies();
  const supabase = createClient(cookieStore);

  const { data, error } = await supabase
    .from('games')
    .update(updates)
    .eq('id', gameId)
    .select(`
      *,
      movie:movies(*),
      guesses:game_guesses(id, guess, created_at),
      clues:game_clues(id, content, created_at)
    `)
    .single();

  if (error) {
    console.error('Error updating game:', error);
    return null;
  }

  return data;
}
```

---
```ts
# 'utils/supabase/server.ts'
import { createClient as createSupabaseClient } from '@supabase/supabase-js';

export const createClient = (cookieStore: unknown) => {
  return createSupabaseClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
      },
    }
  );
};
```

---
```ts
# 'utils/supabase/types.ts'
export interface Movie {
    id: number;
    tmdb_id: number;
    title: string;
    image_url: string;
    genres: string;
    created_at: string;
  }
  
  export interface Game {
    id: number;
    date: string;
    movie_id: number;
    attempts: number;
    is_complete: boolean;
    created_at: string;
    movie?: Movie;
    guesses?: GameGuess[];
    clues?: GameClue[];
  }
  
  export interface GameGuess {
    id: number;
    game_id: number;
    guess: string;
    created_at: string;
  }
  
  export interface GameClue {
    id: number;
    game_id: number;
    content: string;
    created_at: string;
  }
```


---
```ts
# 'middleware.ts'
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req: request, res })
  await supabase.auth.getSession()
  return res
}
```
